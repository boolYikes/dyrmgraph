services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./config/init/postgres_init.sql:/docker-entrypoint-initdb.d/init.sql

  neo4j:
    image: neo4j:5.26.9-community
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_apoc_export_file_enabled: "true"
    volumes:
      - neo4jdata:/data
      - ./init/neo4j_apoc.conf:/var/lib/neo4j/conf/apoc.conf

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.10
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}

  kafka:
    image: confluentinc/cp-kafka:7.4.10
    restart: unless-stopped
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafkadata:/var/lib/kafka/data
      - ./configs/scripts/create_kafka_topics.sh:/scripts/create_kafka_topics.sh

  elasticsearch:
    image: elasticsearch:8.18.4
    restart: unless-stopped
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      xpack.security.enabled: "true"
      discovery.type: single-node
    ulimits:
      memlock: { soft: -1, hard: -1 }
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.18.4
    restart: unless-stopped
    environment:
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_USER: ${ELASTIC_USER}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_HOST: ${ELASTIC_HOST}
      KAFKA_BOOTSTRAP: ${KAFKA_BOOTSTRAP}
    depends_on: [kafka, elasticsearch]
    volumes:
      - ./config/logstash/pipelines.yaml:/usr/share/logstash/config/pipelines.yaml:ro
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro

  kibana:
    image: kibana:8.18.4
    restart: unless-stopped
    depends_on: [elasticsearch]
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_HOSTS: ${ELASTIC_HOST}
    ports: ["5601:5601"]

  cron:
    build: ./services/cron
    environment:
      - BROKER=${BROKER}
      - GDELT_PATH=${GDELT_PATH}
      - TOPIC=${INGESTION_TOPIC}
    volumes:
      - ./data/gdelt:${GDELT_PATH}:ro
    depends_on: [kafka]

  tei:
    image: ghcr.io/huggingface/text-embeddings-inference:1.8
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - MODEL_ID=${TEI_MODEL_ID}
    ports:
      - "${TEI_PORT}:80"
    volumes:
      # model caching (avoid re-downloads)
      - ./models/tei:/data

  llm:
    image: ghcr.io/ggerganov/llama.cpp:server-cuda
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    command:
      - /bin/sh
      - -lc
      - >
        mkdir -p /models &&
        llama-server
        -hf ${LLM_HF_REPO}:${LLM_GGUF_FILENAME}
        --port ${LLM_PORT}
        -c 8192
        -ngl 999
        --flash-attn
    ports:
      - "${LLM_PORT}:${LLM_PORT}"
    volumes:
      - ./models/llm:/models

  embedding_service:
    build: ./services/embedding_service
    restart: unless-stopped
    environment:
      TEI_BASE_URL: ${TEI_BASE_URL}
      POSTGRES_CONN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      KAFKA_BOOTSTRAP: ${KAFKA_BOOTSTRAP}
    depends_on: [postgres, kafka, tei]

  langgraph_pipeline:
    build: ./services/langgraph_pipeline
    restart: unless-stopped
    environment:
      POSTGRES_CONN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      KAFKA_BOOTSTRAP: ${KAFKA_BOOTSTRAP}
    depends_on: [postgres, neo4j, kafka]

  rag_api:
    build: ./services/rag_api
    restart: unless-stopped
    environment:
      POSTGRES_CONN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
    depends_on: [postgres, neo4j, llm]

volumes:
  pgdata:
  neo4jdata:
  esdata:
  kafkadata:
